# -*- coding: utf-8 -*-
"""lab 02-066.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/132Ih6TnwrXXraZsFcS9khaR0gwGXOfZP
"""



"""#Activity 1"""

myList1 = []
print("Enter objects of first list...")
for i in range(5):
    val = input("Enter a value:")
    n = int(val)
    myList1.append(n)

myList2 = []
print("Enter objects of second list...")
for i in range(5):
    val = input("Enter a value:")
    n = int(val)
    myList2.append(n)

list3 = myList1 + myList2
print(list3)

"""#Activity 2"""

def isPalindrome(word):
    temp = word[::-1]
    if temp.capitalize() == word.capitalize():
        return True
    else:
        return False

print(isPalindrome("need"))

"""#Activity 3"""

a = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
b = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

c = []

for indrow in range(3):
    c.append([])
    for indcol in range(3):
        c[indrow].append(0)
        for indaux in range(3):
            c[indrow][indcol] += a[indrow][indaux] * b[indaux][indcol]

print(c)

"""#Activity 4"""

def perimeter(listing):
    leng = len(listing)
    perimeter = 0
    for i in range(0, leng - 1):
        dist = (((listing[i][0] - listing[i + 1][0]) ** 2) +
                ((listing[i][1] - listing[i + 1][1]) ** 2)) ** 0.5
        perimeter = perimeter + dist
    perimeter = perimeter + (((listing[0][0] - listing[leng - 1][0]) ** 2) +
                             ((listing[0][1] - listing[leng - 1][1]) ** 2)) ** 0.5
    return perimeter

L = [(1,3), (2,7), (3,9), (-1,8)]
print(perimeter(L))

"""#Activity 5"""

def symbDiff(a, b):
    e = set()
    for i in a:
        if i not in b:
            e.add(i)
    for i in b:
        if i not in a:
            e.add(i)
    return e

set1 = {0, 1, 2, 4, 5}
set2 = {4, 5, 7, 8, 9}
print(symbDiff(set1, set2))


print(set1.symmetric_difference(set2))
print(set2.symmetric_difference(set1))
print(set1 ^ set2)
print(set2 ^ set1)

"""#Activity 6"""

sample = {("sohaib", "ali"): "0246585468445",
          ("aib", "li"): "02465854645",
          ("sib", "ai"): "0246585468445"}

firstName = input("enter first name: ")
lastName = input("enter last name: ")

searchTuple = (firstName, lastName)
if searchTuple in sample:
    print(sample[searchTuple])
else:
    print("name not found")

"""#Lab Task 1"""

list1 = []
n1 = int(input("Enter the number of elements for the first list: "))
for i in range(n1):
    val = int(input(f"Enter element {i+1}: "))
    list1.append(val)

list2 = []
n2 = int(input("Enter the number of elements for the second list: "))
for i in range(n2):
    val = int(input(f"Enter element {i+1}: "))
    list2.append(val)

merged_list = list1 + list2

merged_list.sort()

print("Sorted Merged List:", merged_list)

"""#Lab Task 2"""

list1 = []
n1 = int(input("Enter the number of elements for the first list: "))
for i in range(n1):
    val = int(input(f"Enter element {i+1}: "))
    list1.append(val)

list2 = []
n2 = int(input("Enter the number of elements for the second list: "))
for i in range(n2):
    val = int(input(f"Enter element {i+1}: "))
    list2.append(val)

merged_list = list1 + list2
merged_list.sort()

smallest = merged_list[0]
largest = merged_list[-1]

print("Sorted Merged List:", merged_list)
print("Smallest Element:", smallest)
print("Largest Element:", largest)

"""#Lab Task 3"""

from math import *

h = 0.001  # Small increment
x_values = [i for i in frange(-pi, pi, h)]  # Generating x values from -pi to pi with step h

print(f"{'x':>10} {'Approximated f\'(x)':>25} {'cos(x)':>25}")

for x in x_values:
    derivative_approx = (sin(x + h) - sin(x)) / h
    actual_cos_x = cos(x)
    print(f"{x:10.5f} {derivative_approx:25.5f} {actual_cos_x:25.5f}")

"""#Lab Task 4"""

birthdays = {
    "Albert Einstein": "03/14/1879",
    "Benjamin Franklin": "01/17/1706",
    "Ada Lovelace": "12/10/1815"
}

print("Welcome to the birthday dictionary. We know the birthdays of:")
for name in birthdays:
    print(name)

name = input("Who's birthday do you want to look up?\n")

if name in birthdays:
    print(f"{name}'s birthday is {birthdays[name]}.")
else:
    print("Sorry, we don't have the birthday information for that person.")

"""#Lab Task 5"""

sample_dict = {
    "name": "Kelly",
    "age": 25,
    "salary": 8000,
    "city": "New York"
}

keys = ["name", "salary"]

new_dict = {key: sample_dict[key] for key in keys}

print(new_dict)